From c236cf1aa546f35d2fb91d9f8202b8b01957853d Mon Sep 17 00:00:00 2001
From: "Tong, Bo" <bo.tong@intel.com>
Date: Wed, 14 Jul 2021 10:27:12 +0800
Subject: [PATCH 1/2] Implement WIC based on headless backend 8.0

Signed-off-by: Tong, Bo <bo.tong@intel.com>
---
 libweston/backend-headless/headless-gbm.c  | 220 ++++++++++++++
 libweston/backend-headless/headless.c      |  97 +++---
 libweston/backend-headless/headless.h      | 156 ++++++++++
 libweston/backend-headless/meson.build     |  45 ++-
 libweston/backend-headless/virtual-input.c | 331 +++++++++++++++++++++
 libweston/backend-headless/virtual-input.h |  65 ++++
 6 files changed, 853 insertions(+), 61 deletions(-)
 create mode 100644 libweston/backend-headless/headless-gbm.c
 create mode 100644 libweston/backend-headless/headless.h
 create mode 100644 libweston/backend-headless/virtual-input.c
 create mode 100644 libweston/backend-headless/virtual-input.h

diff --git a/libweston/backend-headless/headless-gbm.c b/libweston/backend-headless/headless-gbm.c
new file mode 100644
index 00000000..5277113d
--- /dev/null
+++ b/libweston/backend-headless/headless-gbm.c
@@ -0,0 +1,220 @@
+/*
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2011 Intel Corporation
+ * Copyright © 2017, 2018 Collabora, Ltd.
+ * Copyright © 2017, 2018 General Electric Company
+ * Copyright (c) 2018 DisplayLink (UK) Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#include "pixman-renderer.h"
+#include "pixel-formats.h"
+#include "renderer-gl/gl-renderer.h"
+#include "shared/weston-egl-ext.h"
+#include "linux-explicit-synchronization.h"
+
+#include "headless.h"
+
+#include "RemoteDeviceWrapper.h"
+
+struct gl_renderer_interface *gl_renderer;
+remote_device_t ctx;
+
+static struct gbm_device *
+create_gbm_device()
+{
+        char *filename = "/dev/dri/renderD128";
+        int fd = open(filename, O_RDWR);
+        if (fd < 0) {
+		weston_log("Failed to open drm device: %s\n", filename);
+	}
+
+	struct gbm_device *gbm;
+
+	gl_renderer = weston_load_module("gl-renderer.so",
+					 "gl_renderer_interface");
+	if (!gl_renderer)
+		return NULL;
+
+	/* GBM will load a dri driver, but even though they need symbols from
+	 * libglapi, in some version of Mesa they are not linked to it. Since
+	 * only the gl-renderer module links to it, the call above won't make
+	 * these symbols globally available, and loading the DRI driver fails.
+	 * Workaround this by dlopen()'ing libglapi with RTLD_GLOBAL. */
+	dlopen("libglapi.so.0", RTLD_LAZY | RTLD_GLOBAL);
+
+	gbm = gbm_create_device(fd);
+
+	return gbm;
+}
+
+/* When initializing EGL, if the preferred buffer format isn't available
+ * we may be able to substitute an ARGB format for an XRGB one.
+ *
+ * This returns 0 if substitution isn't possible, but 0 might be a
+ * legitimate format for other EGL platforms, so the caller is
+ * responsible for checking for 0 before calling gl_renderer->create().
+ *
+ * This works around https://bugs.freedesktop.org/show_bug.cgi?id=89689
+ * but it's entirely possible we'll see this again on other implementations.
+ */
+static uint32_t
+fallback_format_for(uint32_t format)
+{
+	const struct pixel_format_info *pf;
+
+	pf = pixel_format_get_info_by_opaque_substitute(format);
+	if (!pf)
+		return 0;
+
+	return pf->format;
+}
+
+static int
+headless_backend_create_gl_renderer(struct headless_backend *b)
+{
+	uint32_t format[3] = {
+		b->gbm_format,
+		fallback_format_for(b->gbm_format),
+		0,
+	};
+	unsigned n_formats = 2;
+
+	if (format[1])
+		n_formats = 3;
+	if (gl_renderer->display_create(b->compositor,
+					EGL_PLATFORM_GBM_KHR,
+					(void *)b->gbm,
+					EGL_WINDOW_BIT,
+					format,
+					n_formats) < 0) {
+		return -1;
+	}
+
+	return 0;
+}
+
+int
+init_egl(struct headless_backend *b)
+{
+	b->gbm = create_gbm_device();
+
+	if (!b->gbm)
+		return -1;
+
+	if (headless_backend_create_gl_renderer(b) < 0) {
+		gbm_device_destroy(b->gbm);
+		return -1;
+	}
+
+	ctx = remoteDeviceInit();
+
+	return 0;
+}
+
+/* Init output state that depends on gl or gbm */
+int
+headless_output_init_egl(struct headless_output *output, struct headless_backend *b)
+{
+	uint32_t format[2] = {
+		output->gbm_format,
+		fallback_format_for(output->gbm_format),
+	};
+	unsigned n_formats = 1;
+	struct weston_mode *mode = output->base.current_mode;
+
+	assert(output->gbm_surface == NULL);
+
+	{
+		output->gbm_surface =
+		    gbm_surface_create(b->gbm, mode->width, mode->height,
+				       output->gbm_format,
+				       output->gbm_bo_flags);
+	}
+
+	if (!output->gbm_surface) {
+		weston_log("failed to create gbm surface\n");
+		return -1;
+	}
+
+	if (format[1])
+		n_formats = 2;
+	if (gl_renderer->output_window_create(&output->base,
+					      (EGLNativeWindowType)output->gbm_surface,
+					      output->gbm_surface,
+					      format,
+					      n_formats) < 0) {
+		weston_log("failed to create gl renderer output state\n");
+		gbm_surface_destroy(output->gbm_surface);
+		output->gbm_surface = NULL;
+		return -1;
+	}
+
+	return 0;
+}
+
+void
+headless_output_fini_egl(struct headless_output *output)
+{
+	gl_renderer->output_destroy(&output->base);
+	gbm_surface_destroy(output->gbm_surface);
+	output->gbm_surface = NULL;
+}
+
+static void sendBufferHandle(struct gbm_bo* bo)
+{
+    struct gbm_import_fd_data fdData = {.fd	= gbm_bo_get_fd(bo),
+					.width  = gbm_bo_get_width(bo),
+					.height = gbm_bo_get_height(bo),
+					.stride = gbm_bo_get_stride(bo),
+					.format = gbm_bo_get_format(bo),};
+    setClientTarget(ctx, &fdData);
+    present(ctx);
+}
+
+void
+headless_output_render_gl(struct headless_output *output, pixman_region32_t *damage)
+{
+	struct gbm_bo *bo;
+
+	bo = gbm_surface_lock_front_buffer(output->gbm_surface);
+	if (!bo) {
+		weston_log("failed to lock front buffer: %s\n",
+			   strerror(errno));
+		return;
+	}
+
+	sendBufferHandle(bo);
+	usleep(16666);
+	gbm_surface_release_buffer(output->gbm_surface, bo);
+	return;
+}
diff --git a/libweston/backend-headless/headless.c b/libweston/backend-headless/headless.c
index c98bdc24..a6d0e9bc 100644
--- a/libweston/backend-headless/headless.c
+++ b/libweston/backend-headless/headless.c
@@ -45,57 +45,7 @@
 #include "presentation-time-server-protocol.h"
 #include <libweston/windowed-output-api.h>
 
-enum headless_renderer_type {
-	HEADLESS_NOOP,
-	HEADLESS_PIXMAN,
-	HEADLESS_GL,
-};
-
-struct headless_backend {
-	struct weston_backend base;
-	struct weston_compositor *compositor;
-
-	struct weston_seat fake_seat;
-	enum headless_renderer_type renderer_type;
-
-	struct gl_renderer_interface *glri;
-};
-
-struct headless_head {
-	struct weston_head base;
-};
-
-struct headless_output {
-	struct weston_output base;
-
-	struct weston_mode mode;
-	struct wl_event_source *finish_frame_timer;
-	uint32_t *image_buf;
-	pixman_image_t *image;
-};
-
-static const uint32_t headless_formats[] = {
-	DRM_FORMAT_XRGB8888,
-	DRM_FORMAT_ARGB8888,
-};
-
-static inline struct headless_head *
-to_headless_head(struct weston_head *base)
-{
-	return container_of(base, struct headless_head, base);
-}
-
-static inline struct headless_output *
-to_headless_output(struct weston_output *base)
-{
-	return container_of(base, struct headless_output, base);
-}
-
-static inline struct headless_backend *
-to_headless_backend(struct weston_compositor *base)
-{
-	return container_of(base->backend, struct headless_backend, base);
-}
+#include "headless.h"
 
 static int
 headless_output_start_repaint_loop(struct weston_output *output)
@@ -127,9 +77,13 @@ headless_output_repaint(struct weston_output *output_base,
 {
 	struct headless_output *output = to_headless_output(output_base);
 	struct weston_compositor *ec = output->base.compositor;
+	struct headless_backend *b = to_headless_backend(ec);
 
 	ec->renderer->repaint_output(&output->base, damage);
 
+	if (b->renderer_type == HEADLESS_GL)
+		headless_output_render_gl(output, damage);
+
 	pixman_region32_subtract(&ec->primary_plane.damage,
 				 &ec->primary_plane.damage, damage);
 
@@ -138,14 +92,14 @@ headless_output_repaint(struct weston_output *output_base,
 	return 0;
 }
 
-static void
+/*static void
 headless_output_disable_gl(struct headless_output *output)
 {
 	struct weston_compositor *compositor = output->base.compositor;
 	struct headless_backend *b = to_headless_backend(compositor);
 
 	b->glri->output_destroy(&output->base);
-}
+}*/
 
 static void
 headless_output_disable_pixman(struct headless_output *output)
@@ -168,7 +122,7 @@ headless_output_disable(struct weston_output *base)
 
 	switch (b->renderer_type) {
 	case HEADLESS_GL:
-		headless_output_disable_gl(output);
+		headless_output_fini_egl(output);//headless_output_disable_gl(output);
 		break;
 	case HEADLESS_PIXMAN:
 		headless_output_disable_pixman(output);
@@ -191,7 +145,7 @@ headless_output_destroy(struct weston_output *base)
 	free(output);
 }
 
-static int
+/*static int
 headless_output_enable_gl(struct headless_output *output)
 {
 	struct weston_compositor *compositor = output->base.compositor;
@@ -207,7 +161,7 @@ headless_output_enable_gl(struct headless_output *output)
 	}
 
 	return 0;
-}
+}*/
 
 static int
 headless_output_enable_pixman(struct headless_output *output)
@@ -252,7 +206,8 @@ headless_output_enable(struct weston_output *base)
 
 	switch (b->renderer_type) {
 	case HEADLESS_GL:
-		ret = headless_output_enable_gl(output);
+		ret = headless_output_init_egl(output, b);
+		//ret = headless_output_enable_gl(output);
 		break;
 	case HEADLESS_PIXMAN:
 		ret = headless_output_enable_pixman(output);
@@ -316,6 +271,7 @@ headless_output_set_size(struct weston_output *base,
 static struct weston_output *
 headless_output_create(struct weston_compositor *compositor, const char *name)
 {
+        struct headless_backend *b = to_headless_backend(compositor);
 	struct headless_output *output;
 
 	/* name can't be NULL. */
@@ -325,8 +281,15 @@ headless_output_create(struct weston_compositor *compositor, const char *name)
 	if (!output)
 		return NULL;
 
+        output->backend = b;
+
+#ifdef BUILD_HEADLESS_GBM
+        output->gbm_bo_flags = GBM_BO_USE_LINEAR | GBM_BO_USE_RENDERING;
+#endif
+
 	weston_output_init(&output->base, compositor, name);
 
+	output->gbm_format = headless_formats[0];
 	output->base.destroy = headless_output_destroy;
 	output->base.disable = headless_output_disable;
 	output->base.enable = headless_output_enable;
@@ -334,6 +297,8 @@ headless_output_create(struct weston_compositor *compositor, const char *name)
 
 	weston_compositor_add_pending_output(&output->base, compositor);
 
+        b->input.output = &output->base;
+
 	return &output->base;
 }
 
@@ -376,6 +341,8 @@ headless_destroy(struct weston_compositor *ec)
 	struct headless_backend *b = to_headless_backend(ec);
 	struct weston_head *base, *next;
 
+        udev_input_destroy(&b->input);
+
 	weston_compositor_shutdown(ec);
 
 	wl_list_for_each_safe(base, next, &ec->head_list, compositor_link)
@@ -384,7 +351,7 @@ headless_destroy(struct weston_compositor *ec)
 	free(b);
 }
 
-static int
+/*static int
 headless_gl_renderer_init(struct headless_backend *b)
 {
 	b->glri = weston_load_module("gl-renderer.so", "gl_renderer_interface");
@@ -401,7 +368,7 @@ headless_gl_renderer_init(struct headless_backend *b)
 	}
 
 	return 0;
-}
+}*/
 
 static const struct weston_windowed_output_api api = {
 	headless_output_set_size,
@@ -425,9 +392,19 @@ headless_backend_create(struct weston_compositor *compositor,
 	if (weston_compositor_set_presentation_clock_software(compositor) < 0)
 		goto err_free;
 
+	b->gbm_format = headless_formats[0];
 	b->base.destroy = headless_destroy;
 	b->base.create_output = headless_output_create;
 
+        b->udev = udev_new();
+        if (b->udev == NULL) {
+                weston_log("failed to initialize udev context\n");
+        }
+
+        if (udev_input_init(&b->input, compositor, b->udev) < 0) {
+                weston_log("failed to create input devices\n");
+        }
+
 	if (config->use_pixman && config->use_gl) {
 		weston_log("Error: cannot use both Pixman *and* GL renderers.\n");
 		goto err_free;
@@ -442,7 +419,7 @@ headless_backend_create(struct weston_compositor *compositor,
 
 	switch (b->renderer_type) {
 	case HEADLESS_GL:
-		ret = headless_gl_renderer_init(b);
+		ret = init_egl(b);//headless_gl_renderer_init(b);
 		break;
 	case HEADLESS_PIXMAN:
 		ret = pixman_renderer_init(compositor);
diff --git a/libweston/backend-headless/headless.h b/libweston/backend-headless/headless.h
new file mode 100644
index 00000000..c6671ec2
--- /dev/null
+++ b/libweston/backend-headless/headless.h
@@ -0,0 +1,156 @@
+/*
+ * Copyright © 2008-2011 Kristian Høgsberg
+ * Copyright © 2011 Intel Corporation
+ * Copyright © 2017, 2018 Collabora, Ltd.
+ * Copyright © 2017, 2018 General Electric Company
+ * Copyright (c) 2018 DisplayLink (UK) Ltd.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <ctype.h>
+#include <string.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <linux/input.h>
+#include <linux/vt.h>
+#include <assert.h>
+#include <sys/mman.h>
+#include <time.h>
+
+#include <drm_fourcc.h>
+#include <xf86drm.h>
+#include <xf86drmMode.h>
+
+#ifdef BUILD_HEADLESS_GBM
+#include <gbm.h>
+#endif
+#include <libudev.h>
+
+#include <libweston/libweston.h>
+#include <libweston/backend-drm.h>
+#include <libweston/weston-log.h>
+#include "shared/helpers.h"
+#include "virtual-input.h"
+#include "backend.h"
+#include "libweston-internal.h"
+
+enum headless_renderer_type {
+	HEADLESS_NOOP,
+	HEADLESS_PIXMAN,
+	HEADLESS_GL,
+};
+
+struct headless_backend {
+	struct weston_backend base;
+	struct weston_compositor *compositor;
+
+	enum headless_renderer_type renderer_type;
+
+        struct udev *udev;
+        struct udev_input input;
+
+        struct gbm_device *gbm;
+        uint32_t gbm_format;
+};
+
+struct headless_head {
+	struct weston_head base;
+};
+
+struct headless_output {
+	struct weston_output base;
+	struct headless_backend *backend;
+
+	struct weston_mode mode;
+	struct wl_event_source *finish_frame_timer;
+	uint32_t *image_buf;
+	uint32_t gbm_format;
+	uint32_t gbm_bo_flags;
+	pixman_image_t *image;
+	struct gbm_surface *gbm_surface;
+};
+
+static const uint32_t headless_formats[] = {
+	DRM_FORMAT_XRGB8888,
+	DRM_FORMAT_ARGB8888,
+};
+
+static inline struct headless_head *
+to_headless_head(struct weston_head *base)
+{
+	return container_of(base, struct headless_head, base);
+}
+
+static inline struct headless_output *
+to_headless_output(struct weston_output *base)
+{
+       return container_of(base, struct headless_output, base);
+}
+
+static inline struct headless_backend *
+to_headless_backend(struct weston_compositor *base)
+{
+       return container_of(base->backend, struct headless_backend, base);
+}
+
+#ifdef BUILD_HEADLESS_GBM
+int
+init_egl(struct headless_backend *b);
+
+int
+headless_output_init_egl(struct headless_output *output, struct headless_backend *b);
+
+void
+headless_output_fini_egl(struct headless_output *output);
+
+void
+headless_output_render_gl(struct headless_output *output, pixman_region32_t *damage);
+#else
+inline static int
+init_egl(struct headless_backend *b)
+{
+	weston_log("Compiled without GBM/EGL support\n");
+	return -1;
+}
+
+inline static int
+headless_output_init_egl(struct headless_output *output, struct headless_backend *b)
+{
+	return -1;
+}
+
+inline static void
+headless_output_fini_egl(struct headless_output *output)
+{
+}
+
+inline static void
+headless_output_render_gl(struct headless_output *output, pixman_region32_t *damage)
+{
+}
+#endif
diff --git a/libweston/backend-headless/meson.build b/libweston/backend-headless/meson.build
index c603bb0b..757e05da 100644
--- a/libweston/backend-headless/meson.build
+++ b/libweston/backend-headless/meson.build
@@ -8,11 +8,54 @@ srcs_headless = [
 	'headless.c',
 	presentation_time_server_protocol_h,
 ]
+
+lib_virtual_input_backend = static_library(
+	'virtual_input-backend',
+	[
+		'virtual-input.c',
+	],
+	dependencies: [
+		dep_libweston_private,
+		dependency('libudev', version: '>= 136')
+	],
+	include_directories: common_inc,
+	install: false
+)
+dep_virtual_input_backend = declare_dependency(
+	link_with: lib_virtual_input_backend,
+	include_directories: include_directories('.')
+)
+
+dep_libremote = cc.find_library('remote')
+
+deps_headless = [
+        dep_libdl,
+        dep_libremote,
+        dep_libweston_private,
+        dep_libdrm_headers,
+        dep_virtual_input_backend,
+        dependency('libudev', version: '>= 136'),
+]
+
+if get_option('renderer-gl')
+       dep_gbm = dependency('gbm', required: false)
+       if not dep_gbm.found()
+               error('headless-backend with GL renderer requires gbm which was not found. Or, you can use \'-Drenderer-gl=false\'.')
+       endif
+       deps_headless += dep_gbm
+       if not dep_egl.found()
+               error('headless-backend + gl-renderer requires egl which was not found. Or, you can use \'-Dbackend-headless=false\' or \'-Drenderer-gl=false\'.')
+       endif
+       deps_headless += dep_egl
+       srcs_headless += 'headless-gbm.c'
+       config_h.set('BUILD_HEADLESS_GBM', '1')
+endif
+
 plugin_headless = shared_library(
 	'headless-backend',
 	srcs_headless,
 	include_directories: common_inc,
-	dependencies: [ dep_libweston_private, dep_libdrm_headers ],
+	dependencies: deps_headless,
 	name_prefix: '',
 	install: true,
 	install_dir: dir_module_libweston,
diff --git a/libweston/backend-headless/virtual-input.c b/libweston/backend-headless/virtual-input.c
new file mode 100644
index 00000000..c786614b
--- /dev/null
+++ b/libweston/backend-headless/virtual-input.c
@@ -0,0 +1,331 @@
+/*
+ * Copyright © 2013 Intel Corporation
+ * Copyright © 2013 Jonas Ådahl
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "config.h"
+
+#include <errno.h>
+#include <linux/input.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <libudev.h>
+
+#include <libweston/libweston.h>
+#include "backend.h"
+#include "libweston-internal.h"
+#include "weston-log-internal.h"
+#include "launcher-util.h"
+#include "virtual-input.h"
+#include "shared/helpers.h"
+
+static const uint32_t EVENT_BUFFER_SIZE = 64;
+static int input_pipe_fd = -1;
+static struct weston_touch_device *kTouchDev = NULL;
+static const uint32_t max_pos_x  = 32767;
+static const uint32_t max_pos_y = 32767;
+
+static void
+process_events(struct udev_input *input);
+static struct udev_seat *
+udev_seat_create(struct udev_input *input, const char *seat_name);
+static void
+udev_seat_destroy(struct udev_seat *seat);
+
+static void
+udev_seat_remove_devices(struct udev_seat *seat)
+{
+	return;
+}
+
+void
+udev_input_disable(struct udev_input *input)
+{
+	if (input->suspended)
+		return;
+
+	process_events(input);
+	input->suspended = 1;
+}
+
+static void
+process_events(struct udev_input *input)
+{
+	struct input_event read_buffer[EVENT_BUFFER_SIZE];
+        struct timespec ts;
+	const char *seat_id = "default"; // "seat0"
+	struct udev_seat *seat = udev_seat_get_named(input, seat_id);
+	struct weston_seat *seat_base = &seat->base;
+	int output_width = 0;
+	int output_height = 0;
+
+	if (input->output != NULL && input->output->current_mode != NULL) {
+		output_width = input->output->current_mode->width;
+		output_height = input->output->current_mode->height;
+	}
+
+        if (kTouchDev == NULL) {
+		weston_seat_init_touch(seat_base);
+		weston_seat_init_keyboard(seat_base, NULL);
+		kTouchDev = weston_touch_create_touch_device(seat_base->touch_state,
+				"aic_touch", // udev_device_get_syspath(udev_device),
+				NULL, NULL);
+	}
+
+        static int slot = 0;
+	static int touch_type = WL_TOUCH_DOWN; // default
+        static double pos_x = 0;
+        static double pos_y = 0;
+
+	int read_size = read(input_pipe_fd, read_buffer,
+			    sizeof(read_buffer));
+	if (read_size == 0 || (read_size < 0 && errno == ENODEV)) {
+	    weston_log("could not get event, removed? (input_pipe_fd: %d size: %d"
+		       "buffer size:%ld, errno:%d)\n", input_pipe_fd, read_size,
+			sizeof(read_buffer), errno);
+	} else if (read_size < 0) {
+	    if (errno != EAGAIN && errno != EINTR) {
+	        weston_log("could not get event (errno=%d)", errno);
+	    }
+	} else if ((read_size % sizeof(struct input_event)) != 0) {
+	    weston_log("could not get event (wrong size: %d)", read_size);
+	} else {
+	    int count = read_size / sizeof(struct input_event);
+	    for (int i = 0; i < count; i++) {
+	        struct input_event iev = read_buffer[i];
+		ts.tv_sec = iev.time.tv_sec;
+		ts.tv_nsec = iev.time.tv_usec * 1000;
+	        switch (iev.type) {
+		case 0x01: // EV_KEY
+			notify_key(seat_base, &ts, iev.code, iev.value,
+				   STATE_UPDATE_AUTOMATIC);
+			break;
+		case 0x03: // EV_ABS. Required state machine: DOWN, MOTION, MOTION ..., UP.
+                        switch (iev.code) {
+			case 0x2f: // ABS_MT_SLOT
+				slot = iev.value;
+				break;
+			case 0x39: // ABS_MT_TRACKING_ID
+				if (iev.value >= 0) {
+					touch_type = WL_TOUCH_DOWN;
+				} else {
+					touch_type = WL_TOUCH_UP;
+			                notify_touch(kTouchDev, &ts, slot, 0, 0, touch_type);
+					touch_type = WL_TOUCH_DOWN;
+				}
+				break;
+			case 0x35: // ABS_MT_POSITION_X
+				pos_x = (double)iev.value / max_pos_x * output_width;
+				break;
+			case 0x36: // ABS_MT_POSITION_Y
+				pos_y = (double)iev.value / max_pos_y * output_height;
+				notify_touch(kTouchDev, &ts, slot, pos_x, pos_y, touch_type);
+				if (touch_type == WL_TOUCH_DOWN)
+					touch_type = WL_TOUCH_MOTION;
+				break;
+			}
+			break; // END of EV_ABS
+		}
+	    }
+	}
+}
+
+
+static int
+udev_input_dispatch(int fd, uint32_t mask, void *data)
+{
+	struct udev_input* input = data;
+
+	process_events(input);
+	return 0;
+}
+
+int
+udev_input_enable(struct udev_input *input)
+{
+	char device_path[255];
+	char *device_dir = "/workdir/ipc/";
+	const char *device_name = "input-pipe";
+	int container_id = 0;
+	int input_number = 2;
+	int i = 0;
+
+	if (getenv("WORKDIR_IPC")) {
+		device_dir = getenv("WORKDIR_IPC");
+	}
+
+	if (getenv("CONTAINER_ID")) {
+		container_id = atoi(getenv("CONTAINER_ID"));
+	}
+
+	if (getenv("VIRTUAL_INPUT_NUM")) {
+		input_number = atoi(getenv("VIRTUAL_INPUT_NUM"));
+	}
+
+	for (i = input_number - 1; i >= 0; i--) {
+		sprintf(device_path, "%s%s%d-%d", device_dir, device_name, container_id, i);
+		weston_log("Opening virtual input device: %s\n", device_path);
+
+		if (mkfifo(device_path, S_IFIFO | 0666) < 0 && errno != EEXIST) {
+			weston_log("Failed to create input pipe %s\n", device_path);
+			return -1;
+		}
+	}
+
+	input_pipe_fd = open(device_path, O_RDWR | O_CLOEXEC | O_NONBLOCK);
+	if (input_pipe_fd < 0) {
+		weston_log("could not open %s, %s\n", device_path, strerror(errno));
+		return -1;
+	}
+
+	struct stat st;
+	__mode_t mod = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
+	if (fstat(input_pipe_fd, &st) == 0) {
+		mod |= st.st_mode;
+	}
+	chmod(device_path, mod);
+
+	struct wl_event_loop *loop;
+	struct weston_compositor *c = input->compositor;
+
+	loop = wl_display_get_event_loop(c->wl_display);
+	input->input_source =
+		wl_event_loop_add_fd(loop, input_pipe_fd, WL_EVENT_READABLE,
+				     udev_input_dispatch, input);
+	if (!input->input_source) {
+		weston_log("failed to add virtual input into event loop!\n");
+		return -1;
+	}
+
+	if (input->suspended) {
+		input->suspended = 0;
+		process_events(input);
+	}
+
+	return 0;
+}
+
+int
+udev_input_init(struct udev_input *input, struct weston_compositor *c, struct udev *udev)
+{
+	memset(input, 0, sizeof *input);
+
+	input->compositor = c;
+
+	return udev_input_enable(input);
+}
+
+void
+udev_input_destroy(struct udev_input *input)
+{
+	struct udev_seat *seat, *next;
+
+	wl_list_for_each_safe(seat, next, &input->compositor->seat_list, base.link)
+		udev_seat_destroy(seat);
+}
+
+static void
+udev_seat_output_changed(struct udev_seat *seat, struct weston_output *output)
+{
+	return;
+}
+
+static void
+notify_output_create(struct wl_listener *listener, void *data)
+{
+	struct udev_seat *seat = container_of(listener, struct udev_seat,
+					      output_create_listener);
+	struct weston_output *output = data;
+
+	udev_seat_output_changed(seat, output);
+}
+
+static void
+notify_output_heads_changed(struct wl_listener *listener, void *data)
+{
+	struct udev_seat *seat = container_of(listener, struct udev_seat,
+					      output_heads_listener);
+	struct weston_output *output = data;
+
+	udev_seat_output_changed(seat, output);
+}
+
+static struct udev_seat *
+udev_seat_create(struct udev_input *input, const char *seat_name)
+{
+	struct weston_compositor *c = input->compositor;
+	struct udev_seat *seat;
+
+	seat = zalloc(sizeof *seat);
+	if (!seat)
+		return NULL;
+
+	weston_seat_init(&seat->base, c, seat_name);
+
+	seat->output_create_listener.notify = notify_output_create;
+	wl_signal_add(&c->output_created_signal,
+		      &seat->output_create_listener);
+
+	seat->output_heads_listener.notify = notify_output_heads_changed;
+	wl_signal_add(&c->output_heads_changed_signal,
+		      &seat->output_heads_listener);
+
+	wl_list_init(&seat->devices_list);
+
+	return seat;
+}
+
+static void
+udev_seat_destroy(struct udev_seat *seat)
+{
+	struct weston_keyboard *keyboard =
+		weston_seat_get_keyboard(&seat->base);
+
+	if (keyboard)
+		notify_keyboard_focus_out(&seat->base);
+
+	udev_seat_remove_devices(seat);
+	weston_seat_release(&seat->base);
+	wl_list_remove(&seat->output_create_listener.link);
+	wl_list_remove(&seat->output_heads_listener.link);
+	free(seat);
+}
+
+struct udev_seat *
+udev_seat_get_named(struct udev_input *input, const char *seat_name)
+{
+	struct udev_seat *seat;
+
+	wl_list_for_each(seat, &input->compositor->seat_list, base.link) {
+		if (strcmp(seat->base.seat_name, seat_name) == 0)
+			return seat;
+	}
+
+	return udev_seat_create(input, seat_name);
+}
diff --git a/libweston/backend-headless/virtual-input.h b/libweston/backend-headless/virtual-input.h
new file mode 100644
index 00000000..873a422b
--- /dev/null
+++ b/libweston/backend-headless/virtual-input.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright © 2013 Intel Corporation
+ * Copyright © 2013 Jonas Ådahl
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the
+ * next paragraph) shall be included in all copies or substantial
+ * portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _VIRTUAL_INPUT_H_
+#define _VIRTUAL_INPUT_H_
+
+#include "config.h"
+
+#include <libudev.h>
+
+#include <libweston/libweston.h>
+
+#include <sys/epoll.h>
+
+struct udev_seat {
+	struct weston_seat base;
+	struct wl_list devices_list;
+	struct wl_listener output_create_listener;
+	struct wl_listener output_heads_listener;
+};
+
+struct udev_input {
+	struct wl_event_source *input_source;
+	struct weston_compositor *compositor;
+	struct weston_output *output;
+	int suspended;
+};
+
+int
+udev_input_enable(struct udev_input *input);
+void
+udev_input_disable(struct udev_input *input);
+int
+udev_input_init(struct udev_input *input, struct weston_compositor *c, struct udev *udev);
+void
+udev_input_destroy(struct udev_input *input);
+
+struct udev_seat *
+udev_seat_get_named(struct udev_input *u,
+		    const char *seat_name);
+
+#endif
-- 
2.25.1

