#!/usr/bin/env bash
# author: joe.zheng

# I am serious
set -e

function msg {
  echo "> $@"
}

function usage() {
  local self=`basename $0`
  cat <<EOF
Usage: $self [-d] [-f] [-h] [-n <name>] [-o <dir>] [-t <tag>] [-S <type>] [<src>]
  Generate image package from release package

  -d:        dry run, output information only, default: $DRY_RUN
  -f:        force removal, default: $FORCE
  -n <name>: base name of the package file, default: $PKG_NAME
  -o <dir>:  output directory, default: $OUT_ROOT
  -t <tag>:  tag to apply, default: $TAG
  -S <type>: type of wic cloud,  default: $type, 0, default; 1, icr; 2, esc 3, wic; 4, dg2
  -h:        print the usage message
  <src>:     release package directory, default: $SRC_DIR

  The result will be in the output directory, including:
  * a folder named $OUT_NAME
  * a compressed package file of the above

  They need to be removed first if already exist
EOF

}

DOCKER="sudo docker"
if [[ "$(id -u)" == "0" ]] || id -nG | grep -qw docker; then
  DOCKER="docker"
fi

TAG=${TAG:-latest}  # load from environment if any
TYPE=0
FORCE=n
DRY_RUN=n
PKG_NAME=image
TOP_ROOT=${ANDROID_BUILD_TOP:-$(pwd)}
SRC_ROOT=${ANDROID_PRODUCT_OUT:-$TOP_ROOT}
SRC_NAME=release
SRC_DIR=$SRC_ROOT/$SRC_NAME
OUT_ROOT=$SRC_ROOT
OUT_NAME=image
OUT_DIR=$OUT_ROOT/$OUT_NAME

while getopts ":dfhn:o:t:S:" opt
do
  case $opt in
    d ) DRY_RUN=y;;
    f ) FORCE=y;;
    n ) PKG_NAME=$OPTARG;;
    o ) OUT_ROOT=$OPTARG;;
    t ) TAG=$OPTARG;;
    S ) TYPE=$OPTARG;;
    h ) usage && exit;;
    * ) usage && exit 1;;
  esac
done
shift $((OPTIND-1))

SRC_ROOT=${1:-$SRC_ROOT}

PKG_FILE=${PKG_NAME}.tar.gz
OUT_DIR=$OUT_ROOT/$OUT_NAME
OUT_PKG=$OUT_ROOT/$PKG_FILE

# release image list
IMAGESDEFAULT="coturn webrtc-front-end owt-server-p2p streamer wic"
IMAGESESC="coordinator manage-android coturn webrtc-front-end owt-server-p2p esc-streamer"
IMAGESWIC="coordinator manage-android coturn webrtc-front-end owt-server-p2p wic-streamer"
IMAGESDG2="coordinator manage-android coturn webrtc-front-end owt-server-p2p dg2-streamer"
YAML="k8s"     # folder to store yaml files
TOOL="tool"    # folder to store tools

for v in DOCKER FORCE DRY_RUN TAG TOP_ROOT SRC_ROOT SRC_DIR OUT_ROOT OUT_DIR \
         PKG_NAME OUT_PKG
do
  eval echo "$v: \${$v}"
done

[[ $DRY_RUN = "y" ]] && exit

msg "clean up output directory first: $OUT_ROOT"
for i in $OUT_DIR $OUT_PKG
do
  if [[ -e $i ]]; then
    if [[ $FORCE = "y" ]]; then
      rm -rf $i
    else
      read -p "delete $i? y/N: " result
      if [[ $result = "y" ]]; then
        rm -rf $i
      else
        msg "can not continue, quit"
        exit
      fi
    fi
  fi
done

mkdir -p $OUT_DIR

function on_err() {
  msg "exit due to fatal errors!"
  #msg "oops, clean up before exit!"
  #rm -rf $OUT_DIR $OUT_PKG
}
trap on_err ERR

msg "copy files from $SRC_DIR to $OUT_DIR"
cp -r $SRC_DIR/$TOOL/wic-cloud $OUT_DIR
#cp -rP $SRC_DIR/$YAML $OUT_DIR

msg "build docker images from $SRC_DIR to $OUT_DIR"

case $TYPE in
   [01] ) IMAGES=$IMAGESDEFAULT;;
   2 ) IMAGES=$IMAGESESC;;
   3 ) IMAGES=$IMAGESWIC;;
   4 ) IMAGES=$IMAGESDG2;;
   * ) echo "no type available" && exit 1;;
esac

for i in $IMAGES
do
  msg "build docker image for $i"
  $DOCKER build --build-arg http_proxy=$http_proxy -t $i:$TAG $SRC_DIR/$i
  msg "save docker image $i:$TAG"
  $DOCKER save $i:$TAG | gzip > $OUT_DIR/$i.tar.gz

  #new=${i}:${TAG}
  #msg "update yaml files: $i -> $new"
  #sed -Ei "s|image:\s*(.*/)?$i(:.*)?|image: $new|" $OUT_DIR/$YAML/*/*.yaml
done

#msg "compressing $OUT_DIR"
#(cd $OUT_ROOT && tar czf $PKG_FILE --exclude-vcs $OUT_NAME)
#msg "done: $OUT_PKG"
